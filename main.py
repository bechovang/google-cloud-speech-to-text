import os
import time
import tempfile
import numpy as np
from google.cloud import storage, speech
from google.oauth2 import service_account
from pydub import AudioSegment
from pydub.silence import split_on_silence

# === T·ª± ƒë·ªông thi·∫øt l·∫≠p x√°c th·ª±c t·ª´ file JSON (file n·∫±m c√πng th∆∞ m·ª•c v·ªõi main.py) ===
def set_google_credentials():
    # L·∫•y ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi t·ªõi file JSON credentials (n·∫±m c√πng th∆∞ m·ª•c v·ªõi main.py)
    json_credentials_path = os.path.join(os.path.dirname(__file__), "speech-stt-sa.json")
    
    # Ki·ªÉm tra xem file JSON c√≥ t·ªìn t·∫°i kh√¥ng
    if not os.path.exists(json_credentials_path):
        raise FileNotFoundError(f"Kh√¥ng t√¨m th·∫•y file JSON credentials t·∫°i {json_credentials_path}. Vui l√≤ng ki·ªÉm tra l·∫°i file credentials.")

    # Thi·∫øt l·∫≠p environment variable cho Google Cloud
    os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = json_credentials_path
    print(f"‚úÖ ƒê√£ thi·∫øt l·∫≠p credentials t·ª´: {json_credentials_path}")
    
    return True

# === T√¨m file √¢m thanh c√≥ t√™n ch·ª©a "audio" ===
def find_audio_file():
    """T√¨m file √¢m thanh c√≥ t√™n ch·ª©a 'audio' trong th∆∞ m·ª•c hi·ªán t·∫°i"""
    supported_extensions = ['.mp3', '.wav', '.flac', '.ogg', '.amr', '.awb']
    
    # T√¨m t·∫•t c·∫£ file trong th∆∞ m·ª•c hi·ªán t·∫°i
    for file in os.listdir('.'):
        if os.path.isfile(file):
            # Ki·ªÉm tra xem t√™n file c√≥ ch·ª©a "audio" v√† c√≥ ƒë·ªãnh d·∫°ng √¢m thanh ƒë∆∞·ª£c h·ªó tr·ª£
            if 'audio' in file.lower() and any(file.lower().endswith(ext) for ext in supported_extensions):
                return file
    
    return None

# === Ki·ªÉm tra k√≠ch th∆∞·ªõc file ===
def get_file_size_mb(file_path):
    """L·∫•y k√≠ch th∆∞·ªõc file theo MB"""
    size_bytes = os.path.getsize(file_path)
    size_mb = size_bytes / (1024 * 1024)
    return size_mb

# === X·ª≠ l√Ω file √¢m thanh ƒë∆°n gi·∫£n ===
def process_single_audio_file(bucket_name, audio_file_path, language_code):
    """
    X·ª≠ l√Ω m·ªôt file √¢m thanh duy nh·∫•t
    """
    print(f"üéµ ƒêang x·ª≠ l√Ω file √¢m thanh...")
    
    # Ki·ªÉm tra k√≠ch th∆∞·ªõc file
    file_size_mb = get_file_size_mb(audio_file_path)
    print(f"üìÅ K√≠ch th∆∞·ªõc file: {file_size_mb:.2f} MB")
    
    try:
        # Upload file √¢m thanh l√™n GCS
        blob_name = "audio_file.wav"
        gcs_uri = upload_to_gcs(bucket_name, audio_file_path, blob_name)
        
        # Nh·∫≠n di·ªán file √¢m thanh
        transcript, srt_lines = transcribe_gcs(gcs_uri, language_code)
        
        # X√≥a file tr√™n GCS
        delete_from_gcs(bucket_name, blob_name)
        
        return transcript, srt_lines
        
    except Exception as e:
        print(f"‚ùå L·ªói khi x·ª≠ l√Ω file: {e}")
        raise e

# === X√°c ƒë·ªãnh lo·∫°i file √¢m thanh ===
def get_audio_encoding(file_name):
    _, ext = os.path.splitext(file_name)
    encodings = {
        ".mp3": speech.RecognitionConfig.AudioEncoding.MP3,
        ".wav": speech.RecognitionConfig.AudioEncoding.LINEAR16,
        ".flac": speech.RecognitionConfig.AudioEncoding.FLAC,
        ".ogg": speech.RecognitionConfig.AudioEncoding.OGG_OPUS,
        ".amr": speech.RecognitionConfig.AudioEncoding.AMR,
        ".awb": speech.RecognitionConfig.AudioEncoding.AMR_WB,
    }
    if ext.lower() not in encodings:
        raise ValueError(f"ƒê·ªãnh d·∫°ng file '{ext}' ch∆∞a ƒë∆∞·ª£c h·ªó tr·ª£.")
    return encodings[ext.lower()]

# === Ki·ªÉm tra v√† chuy·ªÉn ƒë·ªïi file √¢m thanh sang mono ===
def convert_to_mono_if_needed(audio_file_path):
    """Chuy·ªÉn ƒë·ªïi file √¢m thanh sang mono n·∫øu c·∫ßn thi·∫øt"""
    try:
        audio = AudioSegment.from_file(audio_file_path)
        if audio.channels > 1:
            print(f"üîÑ Chuy·ªÉn ƒë·ªïi t·ª´ {audio.channels} k√™nh sang mono...")
            audio_mono = audio.set_channels(1)
            
            # T·∫°o file t·∫°m m·ªõi
            temp_dir = tempfile.mkdtemp()
            mono_file_path = os.path.join(temp_dir, "mono_audio.wav")
            audio_mono.export(mono_file_path, format="wav")
            
            print(f"‚úÖ ƒê√£ chuy·ªÉn ƒë·ªïi sang mono: {mono_file_path}")
            return mono_file_path, temp_dir
        else:
            print("‚úÖ File √¢m thanh ƒë√£ l√† mono")
            return audio_file_path, None
    except Exception as e:
        print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi sang mono: {e}")
        return audio_file_path, None


# === Upload file √¢m thanh l√™n GCS ===
def upload_to_gcs(bucket_name, source_file_name, destination_blob_name):
    storage_client = storage.Client()
    bucket = storage_client.bucket(bucket_name)
    blob = bucket.blob(destination_blob_name)

    blob.upload_from_filename(source_file_name)

    print(f"File {source_file_name} ƒë√£ ƒë∆∞·ª£c upload l√™n GCS.")
    return f"gs://{bucket_name}/{destination_blob_name}"


# === X√≥a file tr√™n GCS ===
def delete_from_gcs(bucket_name, blob_name):
    storage_client = storage.Client()
    bucket = storage_client.bucket(bucket_name)
    blob = bucket.blob(blob_name)

    blob.delete()

    print(f"File {blob_name} ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi bucket {bucket_name}.")


# === Nh·∫≠n di·ªán gi·ªçng n√≥i t·ª´ URI GCS ===
def transcribe_gcs(gcs_uri, language_code="vi-VN"):
    # T·∫°o client - s·ª≠ d·ª•ng credentials t·ª´ environment ho·∫∑c file
    client = speech.SpeechClient()

    # L·∫•y t√™n file t·ª´ gcs_uri v√† x√°c ƒë·ªãnh encoding
    file_name = os.path.basename(gcs_uri)
    encoding = get_audio_encoding(file_name)

    audio = speech.RecognitionAudio(uri=gcs_uri)
    config = speech.RecognitionConfig(
        encoding=encoding,
        language_code=language_code,
        enable_automatic_punctuation=True,
        enable_word_time_offsets=True  # B·∫≠t ƒë·ªÉ l·∫•y th·ªùi gian t·ª´ng t·ª´ cho .srt
    )

    operation = client.long_running_recognize(config=config, audio=audio)
    print("ƒêang x·ª≠ l√Ω... Vui l√≤ng ƒë·ª£i.")
    
    try:
        # TƒÉng timeout l√™n 10 ph√∫t cho file l·ªõn
        response = operation.result(timeout=600)
    except Exception as e:
        print(f"üî¥ L·ªói trong qu√° tr√¨nh nh·∫≠n di·ªán: {e}")
        print("üí° G·ª£i √Ω: File √¢m thanh c√≥ th·ªÉ qu√° l·ªõn ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng t∆∞∆°ng th√≠ch")
        raise e

    full_transcript = ""
    srt_lines = []
    line_index = 1

    for result in response.results:
        alternative = result.alternatives[0]
        full_transcript += alternative.transcript + "\n"

        words = alternative.words
        for word_info in words:
            start_sec = word_info.start_time.total_seconds()
            end_sec = word_info.end_time.total_seconds()
            text = word_info.word

            srt_lines.append(f"{line_index}")
            srt_lines.append(f"{to_srt_time(start_sec)} --> {to_srt_time(end_sec)}")
            srt_lines.append(text)
            srt_lines.append("")
            line_index += 1

    return full_transcript, srt_lines


# === Chuy·ªÉn ƒë·ªïi gi√¢y sang ƒë·ªãnh d·∫°ng SRT ===
def to_srt_time(seconds):
    millisec = int((seconds % 1) * 1000)
    seconds = int(seconds)
    mins = seconds // 60
    secs = seconds % 60
    hrs = mins // 60
    mins = mins % 60
    return f"{hrs:02d}:{mins:02d}:{secs:02d},{millisec:03d}"


# === L∆∞u n·ªôi dung th√†nh file TXT ===
def save_txt(text, output_file="recognized_text.txt"):
    with open(output_file, "w", encoding="utf-8") as f:
        f.write(text)
    print(f"üìÑ K·∫øt qu·∫£ nh·∫≠n di·ªán ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o: {output_file}")


# === L∆∞u n·ªôi dung th√†nh file SRT ===
def save_srt(srt_lines, output_file="recognized_subtitles.srt"):
    with open(output_file, "w", encoding="utf-8") as f:
        for line in srt_lines:
            f.write(line + "\n")
    print(f"üìù Ph·ª• ƒë·ªÅ ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o: {output_file}")


# === CH·ªåN NG√îN NG·ªÆ ===
def select_language():
    """Cho ph√©p ng∆∞·ªùi d√πng ch·ªçn ng√¥n ng·ªØ"""
    print("\nüåê CH·ªåN NG√îN NG·ªÆ:")
    print("0 - Ti·∫øng Vi·ªát (vi-VN)")
    print("1 - Ti·∫øng Anh (en-US)")
    
    while True:
        try:
            choice = input("Nh·∫≠p l·ª±a ch·ªçn (0 ho·∫∑c 1): ").strip()
            if choice == "0":
                return "vi-VN", "Ti·∫øng Vi·ªát"
            elif choice == "1":
                return "en-US", "Ti·∫øng Anh"
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p 0 ho·∫∑c 1.")
        except KeyboardInterrupt:
            print("\nüëã T·∫°m bi·ªát!")
            exit(0)



# === CH·∫†Y TO√ÄN B·ªò ===
if __name__ == "__main__":
    # Th√™m: ƒêo th·ªùi gian b·∫Øt ƒë·∫ßu
    start_time = time.time()

    # Th√¥ng tin d·ª± √°n v√† bucket
    PROJECT_ID = "speach-to-text-462517"
    BUCKET_NAME = "bechovang-speach-to-text"
    
    # T√¨m file √¢m thanh c√≥ t√™n ch·ª©a "audio"
    LOCAL_AUDIO_FILE = find_audio_file()
    
    # Ch·ªçn ng√¥n ng·ªØ
    language_code, language_name = select_language()
    print(f"‚úÖ ƒê√£ ch·ªçn: {language_name}")

    # Thi·∫øt l·∫≠p x√°c th·ª±c t·ª´ file JSON (file n·∫±m c√πng th∆∞ m·ª•c v·ªõi main.py)
    try:
        set_google_credentials()
    except FileNotFoundError as e:
        print(f"üî¥ L·ªói: {e}")
        exit(1)

    # Ki·ªÉm tra file √¢m thanh t·ªìn t·∫°i
    if not LOCAL_AUDIO_FILE:
        print(f"L·ªói: Kh√¥ng t√¨m th·∫•y file √¢m thanh c√≥ t√™n ch·ª©a 'audio' trong th∆∞ m·ª•c hi·ªán t·∫°i")
        print("C√°c ƒë·ªãnh d·∫°ng ƒë∆∞·ª£c h·ªó tr·ª£: .mp3, .wav, .flac, .ogg, .amr, .awb")
        exit(1)
    else:
        # Ki·ªÉm tra k√≠ch th∆∞·ªõc file
        file_size_mb = get_file_size_mb(LOCAL_AUDIO_FILE)
        print(f"ƒêang b·∫Øt ƒë·∫ßu x·ª≠ l√Ω file √¢m thanh: {LOCAL_AUDIO_FILE}")
        print(f"üìÅ K√≠ch th∆∞·ªõc file: {file_size_mb:.2f} MB")
        
        if file_size_mb > 10:
            print("‚ö†Ô∏è C·∫£nh b√°o: File √¢m thanh kh√° l·ªõn, c√≥ th·ªÉ m·∫•t nhi·ªÅu th·ªùi gian x·ª≠ l√Ω")
            print("üí° G·ª£i √Ω: N·∫øu g·∫∑p timeout, h√£y th·ª≠ v·ªõi file nh·ªè h∆°n (< 5MB)")
        
        # T·∫°o t√™n file cho GCS
        GCS_BLOB_NAME = "uploaded_audio" + os.path.splitext(LOCAL_AUDIO_FILE)[1]

        try:
            # B∆∞·ªõc 1: Chuy·ªÉn ƒë·ªïi sang mono n·∫øu c·∫ßn
            print("üîß B·∫Øt ƒë·∫ßu x·ª≠ l√Ω √¢m thanh...")
            mono_file, mono_temp_dir = convert_to_mono_if_needed(LOCAL_AUDIO_FILE)
            
            # B∆∞·ªõc 2: X·ª≠ l√Ω file √¢m thanh
            print(f"üéµ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω file √¢m thanh ({language_name})...")
            transcript, srt_lines = process_single_audio_file(
                BUCKET_NAME, mono_file, language_code
            )

            # B∆∞·ªõc 3: L∆∞u k·∫øt qu·∫£
            if transcript.strip():
                save_txt(transcript, f"recognized_text_{language_code}.txt")
                save_srt(srt_lines, f"recognized_subtitles_{language_code}.srt")
                print(f"‚úÖ Ho√†n t·∫•t to√†n b·ªô qu√° tr√¨nh!")
            else:
                print("‚ùå Kh√¥ng c√≥ n·ªôi dung n√†o ƒë∆∞·ª£c nh·∫≠n di·ªán")
            
        except Exception as e:
            print(f"üî¥ L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω: {e}")
            print("üí° Vui l√≤ng ki·ªÉm tra l·∫°i file √¢m thanh v√† th·ª≠ l·∫°i")
        finally:
            # D·ªçn d·∫πp th∆∞ m·ª•c t·∫°m
            try:
                import shutil
                if mono_temp_dir:
                    shutil.rmtree(mono_temp_dir)
                    print("üßπ ƒê√£ d·ªçn d·∫πp file t·∫°m mono")
            except Exception as e:
                print(f"‚ö†Ô∏è L·ªói khi d·ªçn d·∫πp: {e}")

            # T√≠nh v√† in th·ªùi gian x·ª≠ l√Ω
            end_time = time.time()
            elapsed_time = end_time - start_time
            minutes = int(elapsed_time // 60)
            seconds = int(elapsed_time % 60)

            print(f"‚è±Ô∏è T·ªïng th·ªùi gian x·ª≠ l√Ω: {minutes} ph√∫t {seconds} gi√¢y")
